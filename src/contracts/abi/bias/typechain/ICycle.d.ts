/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICycleInterface extends ethers.utils.Interface {
  functions: {
    "claimableCount(uint256)": FunctionFragment;
    "claim(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimableCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimableCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;

  events: {
    "SetEngine(address)": EventFragment;
    "SetStartEngineId(uint256)": EventFragment;
    "SetLevelToSpeed(uint256,uint256)": EventFragment;
    "SetPointPerEngine(uint256)": EventFragment;
    "SetEngineLimit(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetEngine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStartEngineId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLevelToSpeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPointPerEngine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEngineLimit"): EventFragment;
}

export class ICycle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICycleInterface;

  functions: {
    claimableCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimableCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      id: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(uint256,uint256)"(
      id: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claimableCount(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimableCount(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    id: BigNumberish,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(uint256,uint256)"(
    id: BigNumberish,
    count: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claimableCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      id: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(uint256,uint256)"(
      id: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetEngine(engine: null): EventFilter;

    SetStartEngineId(startEngineId: null): EventFilter;

    SetLevelToSpeed(level: null, speed: null): EventFilter;

    SetPointPerEngine(pointPerEngine: null): EventFilter;

    SetEngineLimit(engineLimit: null): EventFilter;
  };

  estimateGas: {
    claimableCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      id: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(uint256,uint256)"(
      id: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimableCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableCount(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      id: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(uint256,uint256)"(
      id: BigNumberish,
      count: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
