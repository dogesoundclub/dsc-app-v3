/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from "ethers";
import { Provider } from "@ethersproject/providers";

import type { ICycle } from "../ICycle";

export class ICycle__factory {
  static connect(address: string, signerOrProvider: Signer | Provider): ICycle {
    return new Contract(address, _abi, signerOrProvider) as ICycle;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "id",
        type: "uint256",
      },
    ],
    name: "claimableCount",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "id",
        type: "uint256",
      },
    ],
    name: "clear",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "id",
        type: "uint256",
      },
      {
        name: "count",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "engine",
        type: "address",
      },
    ],
    name: "SetEngine",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "startEngineId",
        type: "uint256",
      },
    ],
    name: "SetStartEngineId",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "transferListener",
        type: "address",
      },
    ],
    name: "SetTransferListener",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "level",
        type: "uint256",
      },
      {
        indexed: false,
        name: "speed",
        type: "uint256",
      },
    ],
    name: "SetLevelToSpeed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "pointPerEngine",
        type: "uint256",
      },
    ],
    name: "SetPointPerEngine",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "engineLimit",
        type: "uint256",
      },
    ],
    name: "SetEngineLimit",
    type: "event",
  },
];
