/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BiasCompoundInterface extends ethers.utils.Interface {
  functions: {
    "bias()": FunctionFragment;
    "signer()": FunctionFragment;
    "returnMixTime()": FunctionFragment;
    "withdrawMix(uint256)": FunctionFragment;
    "cards()": FunctionFragment;
    "mixPrice()": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "emergencyWithdraw(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMixPrice(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "compoundBlocks(uint256)": FunctionFragment;
    "compound(uint256,uint256,string,bytes)": FunctionFragment;
    "mix()": FunctionFragment;
    "setReturnMixTime(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bias", values?: undefined): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnMixTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMix",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cards", values?: undefined): string;
  encodeFunctionData(functionFragment: "mixPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMixPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compoundBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compound",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setReturnMixTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "bias", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnMixTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mixPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMixPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compoundBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReturnMixTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "SetSigner(address)": EventFragment;
    "SetMixPrice(uint256)": EventFragment;
    "SetReturnMixTime(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMixPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReturnMixTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class BiasCompound extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BiasCompoundInterface;

  functions: {
    bias(overrides?: CallOverrides): Promise<[string]>;

    "bias()"(overrides?: CallOverrides): Promise<[string]>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    "signer()"(overrides?: CallOverrides): Promise<[string]>;

    returnMixTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "returnMixTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawMix(
      biasId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawMix(uint256)"(
      biasId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cards(overrides?: CallOverrides): Promise<[string]>;

    "cards()"(overrides?: CallOverrides): Promise<[string]>;

    mixPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mixPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setSigner(
      _signer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSigner(address)"(
      _signer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setMixPrice(
      _mixPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMixPrice(uint256)"(
      _mixPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    compoundBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "compoundBlocks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    compound(
      biasId: BigNumberish,
      cardId: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "compound(uint256,uint256,string,bytes)"(
      biasId: BigNumberish,
      cardId: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    "mix()"(overrides?: CallOverrides): Promise<[string]>;

    setReturnMixTime(
      _returnMixTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReturnMixTime(uint256)"(
      _returnMixTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  bias(overrides?: CallOverrides): Promise<string>;

  "bias()"(overrides?: CallOverrides): Promise<string>;

  returnMixTime(overrides?: CallOverrides): Promise<BigNumber>;

  "returnMixTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawMix(
    biasId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawMix(uint256)"(
    biasId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cards(overrides?: CallOverrides): Promise<string>;

  "cards()"(overrides?: CallOverrides): Promise<string>;

  mixPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "mixPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  setSigner(
    _signer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSigner(address)"(
    _signer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setMixPrice(
    _mixPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMixPrice(uint256)"(
    _mixPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  compoundBlocks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "compoundBlocks(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  compound(
    biasId: BigNumberish,
    cardId: BigNumberish,
    uri: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "compound(uint256,uint256,string,bytes)"(
    biasId: BigNumberish,
    cardId: BigNumberish,
    uri: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mix(overrides?: CallOverrides): Promise<string>;

  "mix()"(overrides?: CallOverrides): Promise<string>;

  setReturnMixTime(
    _returnMixTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReturnMixTime(uint256)"(
    _returnMixTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    bias(overrides?: CallOverrides): Promise<string>;

    "bias()"(overrides?: CallOverrides): Promise<string>;

    signer(overrides?: CallOverrides): Promise<string>;

    "signer()"(overrides?: CallOverrides): Promise<string>;

    returnMixTime(overrides?: CallOverrides): Promise<BigNumber>;

    "returnMixTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawMix(biasId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawMix(uint256)"(
      biasId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cards(overrides?: CallOverrides): Promise<string>;

    "cards()"(overrides?: CallOverrides): Promise<string>;

    mixPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "mixPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    setSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    "setSigner(address)"(
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(token: string, overrides?: CallOverrides): Promise<void>;

    "emergencyWithdraw(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setMixPrice(
      _mixPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMixPrice(uint256)"(
      _mixPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    compoundBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "compoundBlocks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compound(
      biasId: BigNumberish,
      cardId: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "compound(uint256,uint256,string,bytes)"(
      biasId: BigNumberish,
      cardId: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mix(overrides?: CallOverrides): Promise<string>;

    "mix()"(overrides?: CallOverrides): Promise<string>;

    setReturnMixTime(
      _returnMixTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReturnMixTime(uint256)"(
      _returnMixTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetSigner(signer: string | null): EventFilter;

    SetMixPrice(mixPrice: null): EventFilter;

    SetReturnMixTime(returnMixTime: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    bias(overrides?: CallOverrides): Promise<BigNumber>;

    "bias()"(overrides?: CallOverrides): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    "signer()"(overrides?: CallOverrides): Promise<BigNumber>;

    returnMixTime(overrides?: CallOverrides): Promise<BigNumber>;

    "returnMixTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawMix(
      biasId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawMix(uint256)"(
      biasId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cards(overrides?: CallOverrides): Promise<BigNumber>;

    "cards()"(overrides?: CallOverrides): Promise<BigNumber>;

    mixPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "mixPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    setSigner(_signer: string, overrides?: Overrides): Promise<BigNumber>;

    "setSigner(address)"(
      _signer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyWithdraw(token: string, overrides?: Overrides): Promise<BigNumber>;

    "emergencyWithdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setMixPrice(
      _mixPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMixPrice(uint256)"(
      _mixPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    compoundBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "compoundBlocks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compound(
      biasId: BigNumberish,
      cardId: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "compound(uint256,uint256,string,bytes)"(
      biasId: BigNumberish,
      cardId: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    "mix()"(overrides?: CallOverrides): Promise<BigNumber>;

    setReturnMixTime(
      _returnMixTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReturnMixTime(uint256)"(
      _returnMixTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bias(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bias()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "signer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnMixTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "returnMixTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawMix(
      biasId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawMix(uint256)"(
      biasId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mixPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mixPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSigner(address)"(
      _signer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setMixPrice(
      _mixPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMixPrice(uint256)"(
      _mixPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compoundBlocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "compoundBlocks(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compound(
      biasId: BigNumberish,
      cardId: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "compound(uint256,uint256,string,bytes)"(
      biasId: BigNumberish,
      cardId: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mix()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setReturnMixTime(
      _returnMixTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReturnMixTime(uint256)"(
      _returnMixTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
