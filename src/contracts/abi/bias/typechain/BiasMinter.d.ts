/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BiasMinterInterface extends ethers.utils.Interface {
  functions: {
    "presalePrice()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "bias()": FunctionFragment;
    "ticketPrice()": FunctionFragment;
    "presaleLimitPerTransaction()": FunctionFragment;
    "public1Price()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "public2Price()": FunctionFragment;
    "setCurrentId(uint256)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "ticketWhitelist(address)": FunctionFragment;
    "public1Count()": FunctionFragment;
    "public2Count()": FunctionFragment;
    "presaleCount()": FunctionFragment;
    "ticketCount()": FunctionFragment;
    "addTicketWhitelist(address[])": FunctionFragment;
    "currentId()": FunctionFragment;
    "step()": FunctionFragment;
    "presaleWhitelist(address)": FunctionFragment;
    "addPresaleWhitelist(address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "publicLimitPerTransaction()": FunctionFragment;
    "setStep(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "presalePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "bias", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleLimitPerTransaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "public1Price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "public2Price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "ticketWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "public1Count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "public2Count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTicketWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "currentId", values?: undefined): string;
  encodeFunctionData(functionFragment: "step", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPresaleWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "publicLimitPerTransaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStep",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "presalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bias", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleLimitPerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "public1Price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "public2Price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "public1Count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "public2Count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTicketWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPresaleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicLimitPerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStep", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class BiasMinter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BiasMinterInterface;

  functions: {
    presalePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "presalePrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    "feeTo()"(overrides?: CallOverrides): Promise<[string]>;

    bias(overrides?: CallOverrides): Promise<[string]>;

    "bias()"(overrides?: CallOverrides): Promise<[string]>;

    ticketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ticketPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    presaleLimitPerTransaction(overrides?: CallOverrides): Promise<[BigNumber]>;

    "presaleLimitPerTransaction()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    public1Price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "public1Price()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    public2Price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "public2Price()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCurrentId(
      _currentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCurrentId(uint256)"(
      _currentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    ticketWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "ticketWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    public1Count(overrides?: CallOverrides): Promise<[BigNumber]>;

    "public1Count()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    public2Count(overrides?: CallOverrides): Promise<[BigNumber]>;

    "public2Count()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    presaleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "presaleCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ticketCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTicketWhitelist(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTicketWhitelist(address[])"(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    step(overrides?: CallOverrides): Promise<[BigNumber]>;

    "step()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    presaleWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "presaleWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addPresaleWhitelist(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPresaleWhitelist(address[])"(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    publicLimitPerTransaction(overrides?: CallOverrides): Promise<[BigNumber]>;

    "publicLimitPerTransaction()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setStep(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  presalePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "presalePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  "feeTo()"(overrides?: CallOverrides): Promise<string>;

  bias(overrides?: CallOverrides): Promise<string>;

  "bias()"(overrides?: CallOverrides): Promise<string>;

  ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "ticketPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  presaleLimitPerTransaction(overrides?: CallOverrides): Promise<BigNumber>;

  "presaleLimitPerTransaction()"(overrides?: CallOverrides): Promise<BigNumber>;

  public1Price(overrides?: CallOverrides): Promise<BigNumber>;

  "public1Price()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  public2Price(overrides?: CallOverrides): Promise<BigNumber>;

  "public2Price()"(overrides?: CallOverrides): Promise<BigNumber>;

  setCurrentId(
    _currentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCurrentId(uint256)"(
    _currentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    count: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  ticketWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "ticketWhitelist(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  public1Count(overrides?: CallOverrides): Promise<BigNumber>;

  "public1Count()"(overrides?: CallOverrides): Promise<BigNumber>;

  public2Count(overrides?: CallOverrides): Promise<BigNumber>;

  "public2Count()"(overrides?: CallOverrides): Promise<BigNumber>;

  presaleCount(overrides?: CallOverrides): Promise<BigNumber>;

  "presaleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

  "ticketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  addTicketWhitelist(
    whitelist: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTicketWhitelist(address[])"(
    whitelist: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentId(overrides?: CallOverrides): Promise<BigNumber>;

  "currentId()"(overrides?: CallOverrides): Promise<BigNumber>;

  step(overrides?: CallOverrides): Promise<BigNumber>;

  "step()"(overrides?: CallOverrides): Promise<BigNumber>;

  presaleWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "presaleWhitelist(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addPresaleWhitelist(
    whitelist: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPresaleWhitelist(address[])"(
    whitelist: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeTo(_feeTo: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setFeeTo(address)"(
    _feeTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  publicLimitPerTransaction(overrides?: CallOverrides): Promise<BigNumber>;

  "publicLimitPerTransaction()"(overrides?: CallOverrides): Promise<BigNumber>;

  setStep(
    _step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStep(uint256)"(
    _step: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    presalePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "presalePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    "feeTo()"(overrides?: CallOverrides): Promise<string>;

    bias(overrides?: CallOverrides): Promise<string>;

    "bias()"(overrides?: CallOverrides): Promise<string>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    presaleLimitPerTransaction(overrides?: CallOverrides): Promise<BigNumber>;

    "presaleLimitPerTransaction()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    public1Price(overrides?: CallOverrides): Promise<BigNumber>;

    "public1Price()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    public2Price(overrides?: CallOverrides): Promise<BigNumber>;

    "public2Price()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentId(
      _currentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurrentId(uint256)"(
      _currentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(count: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "mint(uint256)"(
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "ticketWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    public1Count(overrides?: CallOverrides): Promise<BigNumber>;

    "public1Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    public2Count(overrides?: CallOverrides): Promise<BigNumber>;

    "public2Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    presaleCount(overrides?: CallOverrides): Promise<BigNumber>;

    "presaleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addTicketWhitelist(
      whitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addTicketWhitelist(address[])"(
      whitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    currentId(overrides?: CallOverrides): Promise<BigNumber>;

    "currentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    "step()"(overrides?: CallOverrides): Promise<BigNumber>;

    presaleWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "presaleWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addPresaleWhitelist(
      whitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addPresaleWhitelist(address[])"(
      whitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    publicLimitPerTransaction(overrides?: CallOverrides): Promise<BigNumber>;

    "publicLimitPerTransaction()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setStep(_step: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    presalePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "presalePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTo()"(overrides?: CallOverrides): Promise<BigNumber>;

    bias(overrides?: CallOverrides): Promise<BigNumber>;

    "bias()"(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    presaleLimitPerTransaction(overrides?: CallOverrides): Promise<BigNumber>;

    "presaleLimitPerTransaction()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    public1Price(overrides?: CallOverrides): Promise<BigNumber>;

    "public1Price()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    public2Price(overrides?: CallOverrides): Promise<BigNumber>;

    "public2Price()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentId(
      _currentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCurrentId(uint256)"(
      _currentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(count: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>;

    "mint(uint256)"(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    ticketWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ticketWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    public1Count(overrides?: CallOverrides): Promise<BigNumber>;

    "public1Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    public2Count(overrides?: CallOverrides): Promise<BigNumber>;

    "public2Count()"(overrides?: CallOverrides): Promise<BigNumber>;

    presaleCount(overrides?: CallOverrides): Promise<BigNumber>;

    "presaleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    addTicketWhitelist(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addTicketWhitelist(address[])"(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentId(overrides?: CallOverrides): Promise<BigNumber>;

    "currentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    "step()"(overrides?: CallOverrides): Promise<BigNumber>;

    presaleWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "presaleWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPresaleWhitelist(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPresaleWhitelist(address[])"(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeTo(_feeTo: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    publicLimitPerTransaction(overrides?: CallOverrides): Promise<BigNumber>;

    "publicLimitPerTransaction()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setStep(_step: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    presalePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "presalePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeTo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bias(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bias()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ticketPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleLimitPerTransaction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "presaleLimitPerTransaction()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    public1Price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "public1Price()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    public2Price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "public2Price()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurrentId(
      _currentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCurrentId(uint256)"(
      _currentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      count: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    ticketWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ticketWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    public1Count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "public1Count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    public2Count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "public2Count()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "presaleCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ticketCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTicketWhitelist(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTicketWhitelist(address[])"(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    step(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "step()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "presaleWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPresaleWhitelist(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPresaleWhitelist(address[])"(
      whitelist: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    publicLimitPerTransaction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "publicLimitPerTransaction()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setStep(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStep(uint256)"(
      _step: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
